import{_ as a,r as c,o as d,c as n,a as e,b as t,e as r,d as l}from"./app-75535683.js";const s={},i=l('<h2 id="vue中的-forceupdate" tabindex="-1"><a class="header-anchor" href="#vue中的-forceupdate" aria-hidden="true">#</a> vue中的$forceUpdate</h2><p>官方文档中的定义:</p><blockquote><p>迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。</p></blockquote><hr><p>$forceUpdate就是重新<code>render</code>有些变量不在<code>data</code>上，但要这个变量更新的时候，重新（render），从而渲染虚拟DOM,注意这个时候并不是重新加载组件。<br> 结合vue的生命周期，调用<code>$forceUpdate</code>后只会触发<code>beforeUpdate</code>和<code>updated</code>这两个钩子函数，不会触发其他的钩子函数。它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件，即强制更新因某些原因并未渲染到页面的，已经改变的，应该被渲染到页面的数据 data里的某个变量层次太深，更新的时候没有自动触发render。</p><hr><ol><li>主要用来解决强制刷新视图和数据</li><li>结合vue生命周期，调用$forceUpdate后会触发beforeUpdate和updated这两个钩子函数，不会触发其他钩子函数。</li></ol><hr><p>使用场景：</p><ol><li>数据层次太多， 数据修改了，但页面没有重新渲染；</li><li>如果在vue的data中没有进行声明，给没声明的属性赋值（即非响应式的），不会引起vue实例的重新渲染。</li></ol>',10),p={href:"https://blog.csdn.net/muzidigbig/article/details/124247215",target:"_blank",rel:"noopener noreferrer"},u=e("br",null,null,-1),h={href:"https://www.ibashu.cn/news/show_306296.html",target:"_blank",rel:"noopener noreferrer"};function _(f,b){const o=c("ExternalLinkIcon");return d(),n("div",null,[i,e("blockquote",null,[e("p",null,[t("参考文章:$forceUpdate的使用详解"),e("a",p,[t("https://blog.csdn.net/muzidigbig/article/details/124247215"),r(o)]),u,t(" vue中 $forceUpdate的使用解析"),e("a",h,[t("https://www.ibashu.cn/news/show_306296.html"),r(o)])])])])}const v=a(s,[["render",_],["__file","forceUpdate.html.vue"]]);export{v as default};
